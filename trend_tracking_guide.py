#!/usr/bin/env python3
"""
Trend Tracking and Report Comparison Guide
Complete guide and examples for memory leak trend analysis and report comparison
"""

import sys
from pathlib import Path

def print_guide():
    """Print comprehensive guide for report comparison and trend tracking"""
    
    print("🔍 MEMORY LEAK TREND TRACKING & REPORT COMPARISON GUIDE")
    print("=" * 80)
    
    print("\n📊 WHAT IS TREND ANALYSIS?")
    print("-" * 40)
    print("Trend analysis tracks memory leaks over time to identify:")
    print("• 📈 Regressions - New memory leaks introduced")
    print("• 📉 Improvements - Memory leaks fixed")  
    print("• 🔄 Patterns - Recurring issues")
    print("• 📋 Progress - Overall memory health trends")
    
    print("\n🔄 HOW TRENDS WORK")
    print("-" * 40)
    print("1. 📝 Each test run records a 'trend point' with:")
    print("   • Version/build identifier")
    print("   • Total leak count and bytes")
    print("   • Leak breakdown by type and severity")
    print("   • Timestamp and metadata")
    
    print("\n2. 📊 Historical data is stored in SQLite database:")
    print("   • ~/.memory_leak_analyzer/trends.db")
    print("   • Automatically tracks all runs")
    print("   • Provides long-term memory health view")
    
    print("\n3. 🔍 Comparisons identify:")
    print("   • New leaks (fingerprint-based matching)")
    print("   • Fixed leaks (no longer present)")  
    print("   • Regression score (0-100, higher = worse)")
    print("   • Percentage changes in memory usage")
    
    print("\n📋 USAGE EXAMPLES")
    print("-" * 40)
    
    print("\n🔧 1. BASIC REPORT COMPARISON")
    print("Compare two Valgrind XML files:")
    print("```bash")
    print("python compare_reports.py \\")
    print("  --baseline results/v1.0_valgrind.xml \\")
    print("  --current results/v1.1_valgrind.xml \\")
    print("  --baseline-version 'v1.0' \\")
    print("  --current-version 'v1.1' \\")
    print("  --output comparison_v1.0_vs_v1.1.html")
    print("```")
    
    print("\n🔧 2. TREND ANALYSIS WITH MEMORY TESTER")
    print("Enable trend tracking during testing:")
    print("```bash")
    print("python memory_leak_analyzer_enhanced.py \\")
    print("  --input results/valgrind.xml \\")
    print("  --version 'build-123' \\")
    print("  --trend-analysis \\")
    print("  --output report.html")
    print("```")
    
    print("\n🔧 3. CREATE BASELINE FOR TRENDS")
    print("Establish a baseline for future comparisons:")
    print("```bash")
    print("python memory_leak_analyzer_enhanced.py \\")
    print("  --input baseline_valgrind.xml \\")
    print("  --version 'baseline-v1.0' \\")
    print("  --baseline \\")
    print("  --output baseline_report.html")
    print("```")
    
    print("\n🔧 4. AUTOMATED CI/CD INTEGRATION")
    print("Use in build pipelines:")
    print("```bash")
    print("# Run memory test")
    print("python memory_tester.py --config device.yaml --test")
    print("")
    print("# Compare with baseline and fail if regression")
    print("python compare_reports.py \\")
    print("  --baseline baseline.xml \\")
    print("  --current results/current.xml \\")
    print("  --threshold 20.0 \\")
    print("  --json-output comparison.json")
    print("")
    print("# Exit code 1 if regression score > threshold")
    print("```")
    
    print("\n📊 UNDERSTANDING RESULTS")
    print("-" * 40)
    
    print("\n🎯 REGRESSION SCORE (0-100)")
    print("• 0-10: ✅ EXCELLENT (no significant issues)")
    print("• 11-20: 🟡 ACCEPTABLE (minor increases)")
    print("• 21-50: 🟠 CONCERNING (noticeable regression)")
    print("• 51-100: 🔴 CRITICAL (major regression)")
    
    print("\n📈 STATUS INDICATORS")
    print("• IMPROVEMENT: ✅ Fewer leaks and/or bytes")
    print("• NO_CHANGE: ⚪ Identical results")
    print("• MINOR_REGRESSION: 🟡 Small increase")
    print("• REGRESSION: 🟠 Significant increase")
    print("• MAJOR_REGRESSION: 🔴 Critical increase")
    
    print("\n🔍 COMPARISON FEATURES")
    print("-" * 40)
    
    print("📋 DETAILED ANALYSIS:")
    print("• Leak count and byte changes (absolute + percentage)")
    print("• New leaks introduced (with stack traces)")
    print("• Fixed leaks (leaks that disappeared)")
    print("• Severity breakdown comparison")
    print("• Type breakdown comparison")
    
    print("\n📊 VISUAL REPORTS:")
    print("• Interactive HTML reports with color coding")
    print("• Red = regressions, Green = improvements")
    print("• Clickable leak details")
    print("• Export to JSON for further analysis")
    
    print("\n🏗️ WORKFLOW INTEGRATION")
    print("-" * 40)
    
    print("\n🔄 DEVELOPMENT WORKFLOW")
    print("1. 📝 Establish baseline:")
    print("   • Run tests on stable release")
    print("   • Create baseline with --baseline flag")
    
    print("\n2. 🧪 During development:")
    print("   • Run memory tests on each build")
    print("   • Compare against baseline automatically")
    print("   • Track trends over time")
    
    print("\n3. 🚀 Release validation:")
    print("   • Compare release candidate vs baseline")
    print("   • Ensure no major regressions")
    print("   • Update baseline for next cycle")
    
    print("\n📁 FILE LOCATIONS")
    print("-" * 40)
    print("• Trend database: ~/.memory_leak_analyzer/trends.db")
    print("• Comparison reports: comparison_report.html")
    print("• JSON data: comparison.json")
    print("• Test results: results/ directory")
    
    print("\n⚡ PERFORMANCE TIPS")
    print("-" * 40)
    print("• Use version identifiers for easy tracking")
    print("• Store baseline files for reproducible comparisons")
    print("• Set appropriate regression thresholds")
    print("• Archive old reports for historical analysis")
    
    print("\n🎯 BEST PRACTICES")
    print("-" * 40)
    print("✅ DO:")
    print("• Compare similar test conditions")
    print("• Use consistent version naming")
    print("• Set regression thresholds based on your needs")
    print("• Review new leaks carefully")
    print("• Celebrate fixed leaks!")
    
    print("\n❌ DON'T:")
    print("• Compare different test scenarios")
    print("• Ignore minor regressions (they add up)")
    print("• Set thresholds too high (miss real issues)")
    print("• Compare incomplete test runs")
    
    print("\n🚀 ADVANCED FEATURES")
    print("-" * 40)
    
    print("📊 TREND ANALYSIS:")
    print("• Automatic historical tracking")
    print("• Pattern recognition over time")
    print("• Long-term memory health assessment")
    print("• Build-to-build comparison")
    
    print("\n🔍 LEAK FINGERPRINTING:")
    print("• Stack trace + size based matching")
    print("• Identifies same leaks across builds")
    print("• Tracks leak lifecycle (new/fixed/persistent)")
    print("• Handles code changes gracefully")
    
    print("\n📈 REGRESSION SCORING:")
    print("• Weighted scoring algorithm")
    print("• Considers leak count, bytes, and new/fixed ratio")
    print("• Customizable thresholds")
    print("• CI/CD integration friendly")

def print_examples():
    """Print practical examples"""
    
    print("\n\n💡 PRACTICAL EXAMPLES")
    print("=" * 80)
    
    print("\n📋 EXAMPLE 1: Compare Two Builds")
    print("-" * 40)
    print("Scenario: You want to compare build 123 vs build 124")
    print()
    print("Steps:")
    print("1. Run memory tests for both builds")
    print("2. Compare the results")
    print("3. Review the HTML report")
    print()
    print("Commands:")
    print("```bash")
    print("# Compare the builds")
    print("python compare_reports.py \\")
    print("  --baseline results/build_123_valgrind.xml \\")
    print("  --current results/build_124_valgrind.xml \\")
    print("  --baseline-version 'build-123' \\")
    print("  --current-version 'build-124' \\")
    print("  --output build_123_vs_124.html")
    print()
    print("# Open the report")
    print("open build_123_vs_124.html")
    print("```")
    
    print("\n📋 EXAMPLE 2: CI/CD Pipeline Integration")
    print("-" * 40)
    print("Scenario: Fail CI build if memory regressions detected")
    print()
    print("Pipeline script:")
    print("```bash")
    print("#!/bin/bash")
    print("set -e")
    print()
    print("# Run memory leak testing")
    print("python memory_tester.py --config ci_config.yaml --test")
    print()
    print("# Compare with baseline (exit 1 if regression)")
    print("python compare_reports.py \\")
    print("  --baseline baseline/production_baseline.xml \\")
    print("  --current results/current_test.xml \\")
    print("  --current-version \"$BUILD_NUMBER\" \\")
    print("  --threshold 15.0 \\")
    print("  --json-output artifacts/comparison.json")
    print()
    print("echo \"Memory leak comparison completed\"")
    print("```")
    
    print("\n📋 EXAMPLE 3: Long-term Trend Tracking")
    print("-" * 40)
    print("Scenario: Track memory health over multiple releases")
    print()
    print("Commands:")
    print("```bash")
    print("# For each release, record trend data")
    print("python memory_leak_analyzer_enhanced.py \\")
    print("  --input release_v2.1_valgrind.xml \\")
    print("  --version 'v2.1.0' \\")
    print("  --trend-analysis \\")
    print("  --output v2.1_report.html")
    print()
    print("python memory_leak_analyzer_enhanced.py \\")
    print("  --input release_v2.2_valgrind.xml \\")
    print("  --version 'v2.2.0' \\")
    print("  --trend-analysis \\")
    print("  --output v2.2_report.html")
    print()
    print("# View trend database")
    print("sqlite3 ~/.memory_leak_analyzer/trends.db \\")
    print("  \"SELECT version, total_leaks, total_bytes FROM trend_points ORDER BY timestamp;\"")
    print("```")

def main():
    """Main function"""
    print_guide()
    print_examples()
    
    print("\n\n🎉 CONCLUSION")
    print("=" * 80)
    print("Report comparison and trend analysis provide powerful insights into")
    print("memory leak patterns and help maintain code quality over time.")
    print()
    print("Key benefits:")
    print("• 🔍 Early detection of memory regressions")
    print("• 📊 Quantifiable memory health metrics")  
    print("• 🚀 Automated CI/CD integration")
    print("• 📈 Long-term trend visibility")
    print("• ✅ Objective improvement tracking")
    print()
    print("Start with basic comparisons and gradually integrate trend analysis")
    print("into your development workflow for maximum benefit!")

if __name__ == "__main__":
    main() 